# -*- coding: utf-8 -*-
# Auto-generated by Stone, do not modify.
# @generated
# flake8: noqa
# pylint: skip-file
try:
    from . import stone_validators as bv
    from . import stone_base as bb
except (ImportError, SystemError, ValueError):
    # Catch errors raised when importing a relative module when not in a package.
    # This makes testing this file directly (outside of a package) easier.
    import stone_validators as bv
    import stone_base as bb

class Info(object):

    __slots__ = [
        '_title_value',
        '_title_present',
        '_description_value',
        '_description_present',
        '_version_value',
        '_version_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 title=None,
                 version=None,
                 description=None):
        self._title_value = None
        self._title_present = False
        self._description_value = None
        self._description_present = False
        self._version_value = None
        self._version_present = False
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if version is not None:
            self.version = version

    @property
    def title(self):
        """
        :rtype: str
        """
        if self._title_present:
            return self._title_value
        else:
            raise AttributeError("missing required field 'title'")

    @title.setter
    def title(self, val):
        val = self._title_validator.validate(val)
        self._title_value = val
        self._title_present = True

    @title.deleter
    def title(self):
        self._title_value = None
        self._title_present = False

    @property
    def description(self):
        """
        :rtype: str
        """
        if self._description_present:
            return self._description_value
        else:
            return None

    @description.setter
    def description(self, val):
        if val is None:
            del self.description
            return
        val = self._description_validator.validate(val)
        self._description_value = val
        self._description_present = True

    @description.deleter
    def description(self):
        self._description_value = None
        self._description_present = False

    @property
    def version(self):
        """
        :rtype: str
        """
        if self._version_present:
            return self._version_value
        else:
            raise AttributeError("missing required field 'version'")

    @version.setter
    def version(self, val):
        val = self._version_validator.validate(val)
        self._version_value = val
        self._version_present = True

    @version.deleter
    def version(self):
        self._version_value = None
        self._version_present = False

    def __repr__(self):
        return 'Info(title={!r}, version={!r}, description={!r})'.format(
            self._title_value,
            self._version_value,
            self._description_value,
        )

Info_validator = bv.Struct(Info)

class Rock(object):

    __slots__ = [
        '_name_value',
        '_name_present',
        '_namespaces_value',
        '_namespaces_present',
        '_swagger_value',
        '_swagger_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 name=None,
                 namespaces=None,
                 swagger=None):
        self._name_value = None
        self._name_present = False
        self._namespaces_value = None
        self._namespaces_present = False
        self._swagger_value = None
        self._swagger_present = False
        if name is not None:
            self.name = name
        if namespaces is not None:
            self.namespaces = namespaces
        if swagger is not None:
            self.swagger = swagger

    @property
    def name(self):
        """
        :rtype: str
        """
        if self._name_present:
            return self._name_value
        else:
            raise AttributeError("missing required field 'name'")

    @name.setter
    def name(self, val):
        val = self._name_validator.validate(val)
        self._name_value = val
        self._name_present = True

    @name.deleter
    def name(self):
        self._name_value = None
        self._name_present = False

    @property
    def namespaces(self):
        """
        :rtype: list of [str]
        """
        if self._namespaces_present:
            return self._namespaces_value
        else:
            raise AttributeError("missing required field 'namespaces'")

    @namespaces.setter
    def namespaces(self, val):
        val = self._namespaces_validator.validate(val)
        self._namespaces_value = val
        self._namespaces_present = True

    @namespaces.deleter
    def namespaces(self):
        self._namespaces_value = None
        self._namespaces_present = False

    @property
    def swagger(self):
        """
        :rtype: Swagger
        """
        if self._swagger_present:
            return self._swagger_value
        else:
            raise AttributeError("missing required field 'swagger'")

    @swagger.setter
    def swagger(self, val):
        self._swagger_validator.validate_type_only(val)
        self._swagger_value = val
        self._swagger_present = True

    @swagger.deleter
    def swagger(self):
        self._swagger_value = None
        self._swagger_present = False

    def __repr__(self):
        return 'Rock(name={!r}, namespaces={!r}, swagger={!r})'.format(
            self._name_value,
            self._namespaces_value,
            self._swagger_value,
        )

Rock_validator = bv.Struct(Rock)

class Swagger(object):

    __slots__ = [
        '_info_value',
        '_info_present',
        '_host_value',
        '_host_present',
        '_base_path_value',
        '_base_path_present',
        '_schemes_value',
        '_schemes_present',
        '_consumes_value',
        '_consumes_present',
        '_produces_value',
        '_produces_present',
    ]

    _has_required_fields = True

    def __init__(self,
                 info=None,
                 host=None,
                 base_path=None,
                 schemes=None,
                 consumes=None,
                 produces=None):
        self._info_value = None
        self._info_present = False
        self._host_value = None
        self._host_present = False
        self._base_path_value = None
        self._base_path_present = False
        self._schemes_value = None
        self._schemes_present = False
        self._consumes_value = None
        self._consumes_present = False
        self._produces_value = None
        self._produces_present = False
        if info is not None:
            self.info = info
        if host is not None:
            self.host = host
        if base_path is not None:
            self.base_path = base_path
        if schemes is not None:
            self.schemes = schemes
        if consumes is not None:
            self.consumes = consumes
        if produces is not None:
            self.produces = produces

    @property
    def info(self):
        """
        :rtype: Info
        """
        if self._info_present:
            return self._info_value
        else:
            raise AttributeError("missing required field 'info'")

    @info.setter
    def info(self, val):
        self._info_validator.validate_type_only(val)
        self._info_value = val
        self._info_present = True

    @info.deleter
    def info(self):
        self._info_value = None
        self._info_present = False

    @property
    def host(self):
        """
        :rtype: str
        """
        if self._host_present:
            return self._host_value
        else:
            return None

    @host.setter
    def host(self, val):
        if val is None:
            del self.host
            return
        val = self._host_validator.validate(val)
        self._host_value = val
        self._host_present = True

    @host.deleter
    def host(self):
        self._host_value = None
        self._host_present = False

    @property
    def base_path(self):
        """
        :rtype: str
        """
        if self._base_path_present:
            return self._base_path_value
        else:
            return None

    @base_path.setter
    def base_path(self, val):
        if val is None:
            del self.base_path
            return
        val = self._base_path_validator.validate(val)
        self._base_path_value = val
        self._base_path_present = True

    @base_path.deleter
    def base_path(self):
        self._base_path_value = None
        self._base_path_present = False

    @property
    def schemes(self):
        """
        :rtype: list of [str]
        """
        if self._schemes_present:
            return self._schemes_value
        else:
            return None

    @schemes.setter
    def schemes(self, val):
        if val is None:
            del self.schemes
            return
        val = self._schemes_validator.validate(val)
        self._schemes_value = val
        self._schemes_present = True

    @schemes.deleter
    def schemes(self):
        self._schemes_value = None
        self._schemes_present = False

    @property
    def consumes(self):
        """
        :rtype: list of [str]
        """
        if self._consumes_present:
            return self._consumes_value
        else:
            return None

    @consumes.setter
    def consumes(self, val):
        if val is None:
            del self.consumes
            return
        val = self._consumes_validator.validate(val)
        self._consumes_value = val
        self._consumes_present = True

    @consumes.deleter
    def consumes(self):
        self._consumes_value = None
        self._consumes_present = False

    @property
    def produces(self):
        """
        :rtype: list of [str]
        """
        if self._produces_present:
            return self._produces_value
        else:
            return None

    @produces.setter
    def produces(self, val):
        if val is None:
            del self.produces
            return
        val = self._produces_validator.validate(val)
        self._produces_value = val
        self._produces_present = True

    @produces.deleter
    def produces(self):
        self._produces_value = None
        self._produces_present = False

    def __repr__(self):
        return 'Swagger(info={!r}, host={!r}, base_path={!r}, schemes={!r}, consumes={!r}, produces={!r})'.format(
            self._info_value,
            self._host_value,
            self._base_path_value,
            self._schemes_value,
            self._consumes_value,
            self._produces_value,
        )

Swagger_validator = bv.Struct(Swagger)

Info._title_validator = bv.String()
Info._description_validator = bv.Nullable(bv.String())
Info._version_validator = bv.String()
Info._all_field_names_ = set([
    'title',
    'description',
    'version',
])
Info._all_fields_ = [
    ('title', Info._title_validator),
    ('description', Info._description_validator),
    ('version', Info._version_validator),
]

Rock._name_validator = bv.String()
Rock._namespaces_validator = bv.List(bv.String())
Rock._swagger_validator = Swagger_validator
Rock._all_field_names_ = set([
    'name',
    'namespaces',
    'swagger',
])
Rock._all_fields_ = [
    ('name', Rock._name_validator),
    ('namespaces', Rock._namespaces_validator),
    ('swagger', Rock._swagger_validator),
]

Swagger._info_validator = Info_validator
Swagger._host_validator = bv.Nullable(bv.String())
Swagger._base_path_validator = bv.Nullable(bv.String())
Swagger._schemes_validator = bv.Nullable(bv.List(bv.String()))
Swagger._consumes_validator = bv.Nullable(bv.List(bv.String()))
Swagger._produces_validator = bv.Nullable(bv.List(bv.String()))
Swagger._all_field_names_ = set([
    'info',
    'host',
    'base_path',
    'schemes',
    'consumes',
    'produces',
])
Swagger._all_fields_ = [
    ('info', Swagger._info_validator),
    ('host', Swagger._host_validator),
    ('base_path', Swagger._base_path_validator),
    ('schemes', Swagger._schemes_validator),
    ('consumes', Swagger._consumes_validator),
    ('produces', Swagger._produces_validator),
]

ROUTES = {
}

